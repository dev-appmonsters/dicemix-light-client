package ecdsa

import (
	"bytes"
	"testing"
)

type testPair struct {
	data [][]byte
	sign []byte
}

var signTests = []testPair{
	{
		[][]byte{
			{148, 11, 137, 112, 111, 176, 211, 46, 19, 15, 33, 12, 62, 249, 229, 53, 147, 137, 173, 245, 6, 84, 167, 1, 158, 17, 97, 19, 195, 147, 157, 174},
			{10, 75, 8, 6, 16, 146, 132, 242, 206, 180, 254, 184, 249, 163, 1, 24, 132, 189, 128, 248, 14, 34, 54, 50, 48, 49, 56, 45, 48, 56, 45, 51, 49, 32, 49, 52, 58, 51, 51, 58, 52, 55, 46, 51, 53, 50, 52, 55, 48, 48, 54, 50, 32, 43, 48, 53, 51, 48, 32, 73, 83, 84, 32, 109, 61, 43, 56, 46, 51, 57, 51, 50, 56, 52, 56, 56, 51, 16, 1, 26, 20, 39, 250, 239, 178, 109, 137, 23, 48, 129, 15, 52, 93, 21, 244, 157, 146, 159, 69, 144, 61, 26, 20, 212, 30, 130, 198, 113, 93, 199, 79, 179, 216, 204, 227, 230, 102, 72, 109, 115, 154, 220, 95, 26, 20, 194, 13, 200, 57, 217, 153, 238, 8, 26, 156, 4, 196, 194, 67, 78, 8, 217, 107, 239, 172, 26, 20, 18, 138, 80, 114, 179, 25, 68, 137, 7, 43, 51, 150, 235, 55, 242, 15, 177, 158, 39, 182},
		}, []byte{48, 69, 2, 33, 0, 133, 103, 212, 34, 244, 247, 61, 9, 220, 84, 53, 64, 183, 189, 80, 214, 189, 152, 147, 176, 75, 141, 60, 177, 39, 106, 182, 218, 121, 61, 223, 131, 2, 32, 14, 46, 43, 110, 68, 68, 102, 103, 41, 109, 145, 114, 26, 196, 248, 68, 238, 7, 38, 113, 90, 198, 58, 138, 9, 61, 62, 149, 208, 169, 76, 57},
	},
	{
		[][]byte{
			{123, 74, 161, 231, 199, 111, 138, 150, 164, 200, 52, 11, 245, 92, 226, 165, 191, 168, 115, 164, 4, 131, 86, 3, 12, 245, 234, 112, 214, 208, 232, 59},
			{10, 75, 8, 6, 16, 146, 132, 242, 206, 180, 254, 184, 249, 163, 1, 24, 236, 181, 128, 195, 15, 34, 54, 50, 48, 49, 56, 45, 48, 56, 45, 51, 49, 32, 49, 52, 58, 51, 51, 58, 52, 55, 46, 51, 53, 52, 49, 53, 49, 51, 55, 55, 32, 43, 48, 53, 51, 48, 32, 73, 83, 84, 32, 109, 61, 43, 53, 46, 57, 48, 57, 54, 50, 56, 54, 49, 56, 16, 1, 26, 20, 39, 250, 239, 178, 109, 137, 23, 48, 129, 15, 52, 93, 21, 244, 157, 146, 159, 69, 144, 61, 26, 20, 212, 30, 130, 198, 113, 93, 199, 79, 179, 216, 204, 227, 230, 102, 72, 109, 115, 154, 220, 95, 26, 20, 194, 13, 200, 57, 217, 153, 238, 8, 26, 156, 4, 196, 194, 67, 78, 8, 217, 107, 239, 172, 26, 20, 18, 138, 80, 114, 179, 25, 68, 137, 7, 43, 51, 150, 235, 55, 242, 15, 177, 158, 39, 182},
		}, []byte{48, 68, 2, 32, 47, 37, 112, 205, 158, 249, 244, 129, 22, 199, 167, 31, 165, 161, 241, 216, 123, 130, 36, 14, 186, 231, 201, 138, 41, 25, 77, 34, 229, 163, 14, 213, 2, 32, 121, 69, 81, 236, 225, 140, 158, 230, 195, 252, 53, 1, 116, 125, 109, 145, 96, 93, 22, 174, 212, 76, 106, 71, 126, 142, 59, 185, 243, 88, 147, 126},
	},
}

func TestKeyPair(t *testing.T) {
	ecdsa := NewCurveECDSA()
	for _, pair := range signTests {
		output := ecdsa.Sign(pair.data[0], pair.data[1])

		if !bytes.Equal(output, pair.sign) {
			t.Error(
				"For", pair.data,
				"expected", pair.sign,
				"got", output,
			)
		}
	}
}
